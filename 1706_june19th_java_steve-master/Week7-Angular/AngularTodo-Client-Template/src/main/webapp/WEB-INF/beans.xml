<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

<!-- Scans for Spring @s -->
<context:component-scan base-package="com.revature"></context:component-scan>
 
<!-- Turn on MVC @s like @Controller, @RequestMapping -->
<mvc:annotation-driven />

<!-- Tell DispatcherServlet the location of our static content -->
<mvc:resources location="/static/" mapping="/static/**"></mvc:resources>

<!--  Integrate Spring & Hibernate: Contextual Sessions -->
<!-- 
	1. DataSource object (JDBC properties)
	2. SessionFactory, injection the DataSource
	3. TransactionManager, injection the SessionFactory
	4. Beanify all resources need for Persistence like Services, Daos
	
	Turn on tx annoations
 -->
<!-- Tell Spring we are using a transactionManager and to scan for the @s of it 
		@Transactional
-->
<tx:annotation-driven/>
<!-- 1st supply your DataSource: basic JDBC information -->
<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource">
	<!-- Setter DI of Username, Pw, URL, Driver  -->
	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
	<property name="username" value="todo_db"></property>
	<property name="password" value="p4ssw0rd"></property>
	<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
</bean>

<!-- Now give that DataSource object to SessionFactory -->
<bean id="mySessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
	<!-- Inject the DataSource bean -->
	<property name="dataSource" ref="myDataSource"></property>
	
	<!-- Now supply the rest of the Hibernate Properties -->
	<property name="hibernateProperties">
		<props>
			<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
			<prop key="hibernate.show_sql">true</prop>
			<prop key="hibernate.hbm2ddl.auto">create</prop>
		</props>
	</property>
	
	<!-- scans for JPA -->
	<property name="packagesToScan" value="com.revature.model" />
</bean>

<!-- create a transaction manager and give the sessionfactory -->
<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	<property name="sessionFactory" ref="mySessionFactory"></property>
</bean>

<!-- beanify our services and daos -->

</beans>
